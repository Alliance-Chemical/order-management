import { test, expect, createMCPBrowser } from '../mcp-playwright-integration'
import { MCPTestUtils, MCPAssertions } from '../helpers/mcp-test-utils'

test.describe('MCP Enhanced Workspace Tests', () => {
  test('should load dashboard and navigate to workspace', async ({ 
    page, 
    mcpClient, 
    mcpTabId 
  }) => {
    const mcpBrowser = await createMCPBrowser(mcpClient, mcpTabId)
    const assertions = new MCPAssertions(mcpClient, mcpTabId)
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3003'
    
    // Navigate to dashboard using MCP
    await mcpBrowser.navigate(baseUrl)
    await mcpBrowser.waitFor('h1')
    
    // Verify dashboard loaded
    await assertions.assertTextContent('h1', 'Work Queue Dashboard')
    
    // Wait for orders to load
    await MCPTestUtils.waitForCondition(
      mcpClient,
      mcpTabId,
      `() => document.querySelectorAll('table tbody tr').length > 0`,
      10000
    )
    
    // Click first workspace button using MCP
    await mcpBrowser.click('button:has-text("Workspace")')
    
    // Wait for navigation
    await mcpBrowser.waitFor('[data-testid="workspace-header"]')
    
    // Verify workspace page loaded
    await assertions.assertUrlContains('/workspace/')
    
    // Take screenshot for debugging
    await mcpBrowser.screenshot({ fullPage: true })
    
    // Also verify with regular Playwright
    await page.goto(baseUrl)
    await expect(page.locator('h1')).toContainText('Work Queue Dashboard')
  })
  
  test('should perform QR scanning simulation', async ({ 
    mcpClient, 
    mcpTabId 
  }) => {
    const mcpBrowser = await createMCPBrowser(mcpClient, mcpTabId)
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3003'
    
    // Navigate to a test workspace
    await mcpBrowser.navigate(`${baseUrl}/workspace/99001`)
    
    // Simulate QR code scanning by injecting data
    const scanResult = await mcpBrowser.evaluate(`
      () => {
        // Simulate QR scan event
        const event = new CustomEvent('qr-scanned', {
          detail: {
            code: 'TEST-QR-123',
            type: 'source',
            timestamp: Date.now()
          }
        });
        window.dispatchEvent(event);
        return 'QR scan simulated';
      }
    `)
    
    expect(scanResult).toBe('QR scan simulated')
    
    // Check if the QR code was processed
    await MCPTestUtils.waitForCondition(
      mcpClient,
      mcpTabId,
      `() => document.body.textContent.includes('QR Code Scanned')`,
      5000
    )
  })
  
  test('should handle offline mode gracefully', async ({ 
    mcpClient, 
    mcpTabId 
  }) => {
    const mcpBrowser = await createMCPBrowser(mcpClient, mcpTabId)
    const assertions = new MCPAssertions(mcpClient, mcpTabId)
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3003'
    
    await mcpBrowser.navigate(`${baseUrl}/workspace/99001`)
    
    // Simulate offline mode
    await mcpBrowser.evaluate(`
      () => {
        window.dispatchEvent(new Event('offline'));
        return navigator.onLine;
      }
    `)
    
    // Check for offline indicator
    await MCPTestUtils.waitForCondition(
      mcpClient,
      mcpTabId,
      `() => document.querySelector('[data-testid="offline-indicator"]') !== null`,
      5000
    )
    
    // Simulate coming back online
    await mcpBrowser.evaluate(`
      () => {
        window.dispatchEvent(new Event('online'));
        return navigator.onLine;
      }
    `)
    
    // Verify reconnection
    await assertions.assertNoConsoleErrors()
  })
  
  test('should measure performance metrics', async ({ 
    mcpClient, 
    mcpTabId 
  }) => {
    const mcpBrowser = await createMCPBrowser(mcpClient, mcpTabId)
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3003'
    
    // Navigate and measure performance
    await mcpBrowser.navigate(baseUrl)
    await mcpBrowser.waitFor('body')
    
    const metrics = await MCPTestUtils.measurePerformance(mcpClient, mcpTabId)
    
    console.log('Performance Metrics:', metrics)
    
    // Assert performance thresholds
    expect(metrics.loadTime).toBeLessThan(3000)
    expect(metrics.firstContentfulPaint).toBeLessThan(1500)
  })
  
  test('should validate workspace data integrity', async ({ 
    mcpClient, 
    mcpTabId 
  }) => {
    const mcpBrowser = await createMCPBrowser(mcpClient, mcpTabId)
    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3003'
    
    await mcpBrowser.navigate(`${baseUrl}/workspace/99001`)
    await mcpBrowser.waitFor('[data-testid="workspace-content"]')
    
    // Validate data structure
    const workspaceData = await mcpBrowser.evaluate(`
      () => {
        const data = window.__workspaceData || {};
        return JSON.stringify({
          hasOrderId: !!data.orderId,
          hasCustomer: !!data.customerName,
          hasItems: Array.isArray(data.items) && data.items.length > 0,
          hasPhase: !!data.currentPhase
        });
      }
    `)
    
    const parsed = JSON.parse(workspaceData)
    expect(parsed.hasOrderId).toBe(true)
    expect(parsed.hasCustomer).toBe(true)
    expect(parsed.hasItems).toBe(true)
    expect(parsed.hasPhase).toBe(true)
  })
})